import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, useState } from "react";
import { useRouter } from "next/router"
import logo from '../../public/logo.png'
import LoadingButton from '@mui/lab/LoadingButton';
import { signedRequest } from '@/utils/signedRequest';
import { AssetAccount, PublicKey } from '@/utils/types';
import { UIStore } from '@/utils/store';

const inter = Inter({ subsets: ['latin'] })

export default function Wallet() {
  let item;
  const router = useRouter()
  const [accessKey, setAccessKey] = useState('-')
  const [loading, setLoading] = useState(false);
  const wallet = UIStore.useState(s => s.wallet);

  useEffect(() => {
    const interval = setInterval(async () => {
      const key = localStorage.getItem('access_key')
      setAccessKey(key || '')
      if (!key) {
        router.push('/login')
      }
    }, 10000)
    return () => clearInterval(interval)
  }, [accessKey, router])

  const handleCreateWallet = async () => {
    setLoading(true)
    signedRequest<PublicKey>(
      'POST',
      '/api/public-keys',
      'POST',
      /*
      '/assets/asset-accounts',
      JSON.stringify({ assetSymbol: 'ETH' }
      */
     '/public-keys',
     '{}'
    ).then((pk: PublicKey) => {   //  AssetAccount) => {
      console.log('Public key created: '  + JSON.stringify(pk))
      UIStore.update(s => {
        s.wallet = pk;
      })
      router.push('wallet')
    }).catch((error) => {
      console.log(error)
    })
  }

  return (
    <>
      <Head>
        <title>Dfns Demo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>

      <Image
        src={logo}
        alt="logo"
        width={411} 
        height={200} 
        // blurDataURL="data:..." automatically provided
        // placeholder="blur" // Optional blur-up while loading
      />
      Here's your wallet address:      

    <div>{wallet?.id}</div>       
    <div>{wallet?.publicKey}</div>       
    
    <LoadingButton variant="contained" loading={loading} onClick={handleCreateWallet}>Create Wallet</LoadingButton>

      </main>
    </>
  )
}
